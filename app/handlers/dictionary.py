# -*- coding: utf-8 -*-

from typing import Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from config import (
    CB_DICT_VIEW, CB_DICT_DELETE_MODE, CB_DICT_CONFIRM_DELETE,
    CB_DICT_EXECUTE_DELETE, logger, DICT_WORDS_PER_PAGE
)
from dal.repositories import WordRepository, UserDictionaryRepository

word_repo = WordRepository()
user_dict_repo = UserDictionaryRepository()


async def view_dictionary_page_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å–ª–æ–≤–∞—Ä—é –∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
    –≤ —Ä–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è.
    """
    query = update.callback_query
    await query.answer()
    
    parts = query.data.split(':')
    action = f"{parts[0]}:{parts[1]}" # e.g., "dict:view"
    page = int(parts[2])
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –±—ã–ª –ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è
    deletion_mode = action == CB_DICT_DELETE_MODE
    
    await view_dictionary_page_logic(update, context, page=page, deletion_mode=deletion_mode)


async def view_dictionary_page_logic(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    page: int,
    deletion_mode: bool,
    exclude_word_id: Optional[int] = None
):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–ª–æ–≤–∞—Ä—è.
    """
    query = update.callback_query
    user_id = query.from_user.id
    
    words_from_db = user_dict_repo.get_dictionary_page(user_id, page, DICT_WORDS_PER_PAGE)
    
    # –ï—Å–ª–∏ –º—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ —É–¥–∞–ª–∏–ª–∏ —Å–ª–æ–≤–æ, —É–±–∏—Ä–∞–µ–º –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞
    words = [w for w in words_from_db if w['word_id'] != exclude_word_id] if exclude_word_id else words_from_db
    
    has_next_page = len(words) > DICT_WORDS_PER_PAGE
    words_on_page = words[:DICT_WORDS_PER_PAGE]

    # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—É—Å—Ç–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é
    if not words_on_page and page > 0:
        return await view_dictionary_page_logic(update, context, page=page - 1, deletion_mode=False)
    
    # –ï—Å–ª–∏ —Å–ª–æ–≤ –Ω–µ—Ç —Å–æ–≤—Å–µ–º
    if not words_on_page and page == 0:
        await query.edit_message_text(
            "–í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
        )
        return

    keyboard = []
    message_text = f"–í–∞—à —Å–ª–æ–≤–∞—Ä—å (—Å—Ç—Ä. {page + 1}):\n\n"
    if deletion_mode:
        message_text = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    for word in words_on_page:
        if deletion_mode:
            keyboard.append([
                InlineKeyboardButton(f"üóëÔ∏è {word['hebrew']}", callback_data=f"{CB_DICT_CONFIRM_DELETE}:{word['word_id']}:{page}")
            ])
        else:
            message_text += f"‚Ä¢ {word['hebrew']} ‚Äî {word['translation_text']}\n"
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    nav_buttons = []
    nav_pattern = CB_DICT_DELETE_MODE if deletion_mode else CB_DICT_VIEW
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"{nav_pattern}:{page-1}"))
    if has_next_page:
        nav_buttons.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"{nav_pattern}:{page+1}"))
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if deletion_mode:
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ö —Å–ª–æ–≤–∞—Ä—é", callback_data=f"{CB_DICT_VIEW}:{page}")])
    else:
        # –ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ —Ä–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        keyboard.append([InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ", callback_data=f"{CB_DICT_DELETE_MODE}:0")])
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    await query.edit_message_text(message_text, reply_markup=InlineKeyboardMarkup(keyboard))


async def confirm_delete_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞."""
    query = update.callback_query
    await query.answer()
    
    _, _, word_id_str, page_str = query.data.split(':')
    word_hebrew = word_repo.get_word_hebrew_by_id(int(word_id_str))
    
    if not word_hebrew:
        await query.edit_message_text("–û—à–∏–±–∫–∞: —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
        
    text = f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ '{word_hebrew}' –∏–∑ –≤–∞—à–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è?"
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"{CB_DICT_EXECUTE_DELETE}:{word_id_str}:{page_str}")],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"{CB_DICT_DELETE_MODE}:{page_str}")]
    ]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))


async def execute_delete_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ—Ç —Å–ª–æ–≤–æ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer("–°–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ")
    
    _, _, word_id_str, page_str = query.data.split(':')
    word_id, page = int(word_id_str), int(page_str)
    
    user_dict_repo.remove_word_from_dictionary(query.from_user.id, word_id)
    
    # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ª–æ–≤–∞—Ä—è, –∏—Å–∫–ª—é—á–∞—è —É–¥–∞–ª–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
    await view_dictionary_page_logic(update, context, page=page, deletion_mode=False, exclude_word_id=word_id)
