# -*- coding: utf-8 -*-

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from config import CB_SETTINGS_MENU, CB_TENSES_MENU, CB_TENSE_TOGGLE, TENSE_MAP
from dal.unit_of_work import UnitOfWork
from dal.models import Tense


async def settings_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("üï∞Ô∏è –ú–æ–∏ –≤—Ä–µ–º–µ–Ω–∞ –≥–ª–∞–≥–æ–ª–æ–≤", callback_data=CB_TENSES_MENU)],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
    ]

    await query.edit_message_text(
        text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def manage_tenses_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∞–º–∏ –≥–ª–∞–≥–æ–ª–æ–≤."""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    with UnitOfWork() as uow:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
        user_settings = uow.user_settings.get_user_settings(user_id)
        if not user_settings.tense_settings:
            uow.user_settings.initialize_tense_settings(user_id)
            uow.commit()

        user_settings = uow.user_settings.get_user_settings(user_id)

    keyboard = []
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –≤—Ä–µ–º–µ–Ω
    tense_keys_ordered = ["perf", "ap", "impf", "imp"]

    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∏–∑ Pydantic –º–æ–¥–µ–ª–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    settings_map = user_settings.get_settings_as_dict()

    for tense_key in tense_keys_ordered:
        tense_name = TENSE_MAP.get(tense_key, tense_key)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º TENSE_MAP
        is_active = settings_map.get(tense_key, False)
        status_icon = "‚úÖ" if is_active else "‚¨úÔ∏è"
        button_text = f"{status_icon} {tense_name.capitalize()}"
        keyboard.append(
            [
                InlineKeyboardButton(
                    button_text, callback_data=f"{CB_TENSE_TOGGLE}:{tense_key}"
                )
            ]
        )

    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=CB_SETTINGS_MENU)])

    await query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑—É—á–∞—Ç—å –∏ –≤–∏–¥–µ—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö —Å–ø—Ä—è–∂–µ–Ω–∏–π:",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )


async def toggle_tense(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Ä–µ–º–µ–Ω–∏."""
    query = update.callback_query
    user_id = query.from_user.id
    tense_to_toggle = query.data.split(":")[2]

    with UnitOfWork() as uow:
        uow.user_settings.toggle_tense_setting(user_id, Tense(tense_to_toggle))
        uow.commit()

    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    await manage_tenses_menu(update, context)
