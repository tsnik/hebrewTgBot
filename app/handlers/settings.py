# -*- coding: utf-8 -*-

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from config import (
    CB_SETTINGS_MENU,
    CB_TENSES_MENU,
    CB_TENSE_TOGGLE,
    TENSE_MAP,
    CB_TOGGLE_TRAINING_MODE,
    logger,
)
from dal.unit_of_work import UnitOfWork
from dal.models import Tense
from metrics import increment_callbacks_counter
from utils import set_request_id


@increment_callbacks_counter
@set_request_id
async def settings_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with UnitOfWork() as uow:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ –æ–±–µ–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        uow.user_settings.initialize_tense_settings(user_id)
        uow.user_settings.initialize_user_settings(user_id)
        uow.commit()

        user_settings = uow.user_settings.get_user_settings(user_id)

    mode_status = "‚úÖ –í–∫–ª" if user_settings.use_grammatical_forms else "‚¨úÔ∏è –í—ã–∫–ª"
    training_mode_button_text = f"üîÑ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ä–µ–∂–∏–º: {mode_status}"

    keyboard = [
        [InlineKeyboardButton("üï∞Ô∏è –ú–æ–∏ –≤—Ä–µ–º–µ–Ω–∞ –≥–ª–∞–≥–æ–ª–æ–≤", callback_data=CB_TENSES_MENU)],
        [
            InlineKeyboardButton(
                training_mode_button_text, callback_data=CB_TOGGLE_TRAINING_MODE
            )
        ],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
    ]

    message_text = (
        "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n"
        "_–í –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–º —Ä–µ–∂–∏–º–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã–µ "
        "–≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—ã —Å–ª–æ–≤ (—á–∏—Å–ª–æ, —Ä–æ–¥, —Å–ø—Ä—è–∂–µ–Ω–∏–µ), "
        "–∞ –Ω–µ —Ç–æ–ª—å–∫–æ –∏—Ö –±–∞–∑–æ–≤—É—é —Ñ–æ—Ä–º—É._"
    )

    await query.edit_message_text(
        text=message_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN,
    )


@increment_callbacks_counter
@set_request_id
async def manage_tenses_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∞–º–∏ –≥–ª–∞–≥–æ–ª–æ–≤."""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    with UnitOfWork() as uow:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
        user_settings = uow.user_settings.get_user_settings(user_id)
        if not user_settings.tense_settings:
            uow.user_settings.initialize_tense_settings(user_id)
            uow.commit()

        user_settings = uow.user_settings.get_user_settings(user_id)

    keyboard = []
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –≤—Ä–µ–º–µ–Ω
    tense_keys_ordered = ["perf", "ap", "impf", "imp"]

    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∏–∑ Pydantic –º–æ–¥–µ–ª–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    settings_map = user_settings.get_settings_as_dict()

    for tense_key in tense_keys_ordered:
        tense_name = TENSE_MAP.get(tense_key, tense_key)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º TENSE_MAP
        is_active = settings_map.get(tense_key, False)
        status_icon = "‚úÖ" if is_active else "‚¨úÔ∏è"
        button_text = f"{status_icon} {tense_name.capitalize()}"
        keyboard.append(
            [
                InlineKeyboardButton(
                    button_text, callback_data=f"{CB_TENSE_TOGGLE}:{tense_key}"
                )
            ]
        )

    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=CB_SETTINGS_MENU)])

    await query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑—É—á–∞—Ç—å –∏ –≤–∏–¥–µ—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö —Å–ø—Ä—è–∂–µ–Ω–∏–π:",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )


@increment_callbacks_counter
@set_request_id
async def toggle_tense(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Ä–µ–º–µ–Ω–∏."""
    query = update.callback_query
    user_id = query.from_user.id
    tense_to_toggle = query.data.split(":")[2]

    with UnitOfWork() as uow:
        uow.user_settings.toggle_tense_setting(user_id, Tense(tense_to_toggle))

    logger.info(f"User {{user_id}} toggled tense '{tense_to_toggle}'.")

    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    await manage_tenses_menu(update, context)


@increment_callbacks_counter
@set_request_id
async def toggle_training_mode_handler(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º."""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    with UnitOfWork() as uow:
        uow.user_settings.toggle_training_mode(user_id)
        uow.commit()

    # –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º `settings_menu`,
    # —á—Ç–æ–±—ã –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å –º–µ–Ω—é —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
    await settings_menu(update, context)
