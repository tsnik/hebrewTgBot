# -*- coding: utf-8 -*-

from typing import Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from telegram.constants import ParseMode

from config import (
    logger,
    CB_DICT_VIEW,
    CB_TRAIN_MENU,
    CB_ADD,
    CB_DICT_CONFIRM_DELETE,
    CB_SHOW_VERB,
)
from dal.unit_of_work import UnitOfWork


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.effective_user
    with UnitOfWork() as uow:
        uow.user_dictionary.add_user(user.id, user.first_name, user.username)
        uow.commit()

    keyboard = [
        [InlineKeyboardButton("üß† –ú–æ–π —Å–ª–æ–≤–∞—Ä—å", callback_data=f"{CB_DICT_VIEW}:0")],
        [InlineKeyboardButton("üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", callback_data=CB_TRAIN_MENU)],
    ]
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–ª–æ–≤–æ –Ω–∞ –∏–≤—Ä–∏—Ç–µ –¥–ª—è –ø–æ–∏—Å–∫–∞.",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )


async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("üß† –ú–æ–π —Å–ª–æ–≤–∞—Ä—å", callback_data=f"{CB_DICT_VIEW}:0")],
        [InlineKeyboardButton("üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", callback_data=CB_TRAIN_MENU)],
    ]
    await query.edit_message_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def display_word_card(
    context: ContextTypes.DEFAULT_TYPE,
    user_id: int,
    chat_id: int,
    word_data: dict,
    message_id: Optional[int] = None,
    in_dictionary: Optional[bool] = None,
):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Å–ª–æ–≤–∞. –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏
    –ø–µ—Ä–µ–¥–∞–Ω message_id, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ.
    """
    logger.info(f"-> display_word_card: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏: {word_data}")

    word_id = word_data["word_id"]

    if in_dictionary is None:
        with UnitOfWork() as uow:
            in_dictionary = uow.user_dictionary.is_word_in_dictionary(user_id, word_id)

    translations = word_data.get("translations", [])
    primary_translation = next(
        (t.get("translation_text") for t in translations if t.get("is_primary")),
        "–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω",
    )
    other_translations = [
        t.get("translation_text") for t in translations if not t.get("is_primary")
    ]

    translation_str = primary_translation
    if other_translations:
        translation_str += f" (—Ç–∞–∫–∂–µ: {', '.join(other_translations)})"

    card_text_header = (
        f"–°–ª–æ–≤–æ *{word_data['hebrew']}* —É–∂–µ –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ."
        if in_dictionary
        else f"–ù–∞–π–¥–µ–Ω–æ: *{word_data['hebrew']}*"
    )
    card_text = f"{card_text_header} [{word_data.get('transcription', '')}]\n–ü–µ—Ä–µ–≤–æ–¥: {translation_str}\n"

    # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –î–ê–ù–ù–´–• ---
    pos = word_data.get("part_of_speech")
    if pos == "verb":
        if word_data.get("root"):
            card_text += f"\n–ö–æ—Ä–µ–Ω—å: {word_data['root']}"
        if word_data.get("binyan"):
            card_text += f"\n–ë–∏–Ω—å—è–Ω: {word_data['binyan']}"
    elif pos == "noun":
        if word_data.get("gender"):
            gender_display = (
                "–ú—É–∂—Å–∫–æ–π —Ä–æ–¥" if word_data["gender"] == "masculine" else "–ñ–µ–Ω—Å–∫–∏–π —Ä–æ–¥"
            )
            card_text += f"\n–†–æ–¥: {gender_display}"
        if word_data.get("singular_form"):
            card_text += f"\n–ï–¥. —á–∏—Å–ª–æ: {word_data['singular_form']}"
        if word_data.get("plural_form"):
            card_text += f"\n–ú–Ω. —á–∏—Å–ª–æ: {word_data['plural_form']}"
    elif pos == "adjective":
        card_text += "\n*–§–æ—Ä–º—ã:*"
        if word_data.get("masculine_singular"):
            card_text += f"\n–º.—Ä., –µ–¥.—á.: {word_data['masculine_singular']}"
        if word_data.get("feminine_singular"):
            card_text += f"\n–∂.—Ä., –µ–¥.—á.: {word_data['feminine_singular']}"
        if word_data.get("masculine_plural"):
            card_text += f"\n–º.—Ä., –º–Ω.—á.: {word_data['masculine_plural']}"
        if word_data.get("feminine_plural"):
            card_text += f"\n–∂.—Ä., –º–Ω.—á.: {word_data['feminine_plural']}"

    card_text = card_text.strip()
    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò ---

    keyboard_buttons = []
    if in_dictionary:
        # –ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ —Ä–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        keyboard_buttons.append(
            InlineKeyboardButton(
                "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"{CB_DICT_CONFIRM_DELETE}:{word_id}:0"
            )
        )
    else:
        keyboard_buttons.append(
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data=f"{CB_ADD}:{word_id}")
        )

    # *** –ò–ó–ú–ï–ù–ï–ù–ê –ü–†–û–í–ï–†–ö–ê ***
    if word_data.get("part_of_speech") == "verb":
        keyboard_buttons.append(
            InlineKeyboardButton(
                "üìñ –°–ø—Ä—è–∂–µ–Ω–∏—è", callback_data=f"{CB_SHOW_VERB}:{word_id}"
            )
        )

    keyboard = [
        keyboard_buttons,
        [InlineKeyboardButton("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        if message_id:
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=card_text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN,
            )
        else:
            await context.bot.send_message(
                chat_id=chat_id,
                text=card_text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN,
            )
    except Exception as e:
        if "Message is not modified" in str(e):
            logger.warning(
                "–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è."
            )
        else:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–ª–æ–≤–∞: {e}", exc_info=True
            )


async def back_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await main_menu(update, context)
    return ConversationHandler.END
