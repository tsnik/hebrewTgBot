# -*- coding: utf-8 -*-

from typing import Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Message
from telegram.ext import ContextTypes, ConversationHandler
from telegram.constants import ParseMode

from config import logger, CB_DICT_VIEW, CB_TRAIN_MENU, CB_ADD, CB_DICT_CONFIRM_DELETE, CB_SHOW_VERB, CB_VIEW_CARD
from services.database import db_read_query, db_write_query


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.effective_user
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ—Ç
    db_write_query(
        "INSERT OR IGNORE INTO users (user_id, first_name, username) VALUES (?, ?, ?)",
        (user.id, user.first_name, user.username)
    )
    keyboard = [
        [InlineKeyboardButton("üß† –ú–æ–π —Å–ª–æ–≤–∞—Ä—å", callback_data=f"{CB_DICT_VIEW}_0")],
        [InlineKeyboardButton("üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", callback_data=CB_TRAIN_MENU)]
    ]
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–ª–æ–≤–æ –Ω–∞ –∏–≤—Ä–∏—Ç–µ –¥–ª—è –ø–æ–∏—Å–∫–∞.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("üß† –ú–æ–π —Å–ª–æ–≤–∞—Ä—å", callback_data=f"{CB_DICT_VIEW}_0")],
        [InlineKeyboardButton("üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", callback_data=CB_TRAIN_MENU)]
    ]
    await query.edit_message_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def display_word_card(
    context: ContextTypes.DEFAULT_TYPE,
    user_id: int,
    chat_id: int,
    word_data: dict,
    message_id: Optional[int] = None,
    in_dictionary: Optional[bool] = None  # <-- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Å–ª–æ–≤–∞. –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏
    –ø–µ—Ä–µ–¥–∞–Ω message_id, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ.
    """
    word_id = word_data['word_id']
    
    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---
    # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω —è–≤–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –≤ –ë–î.
    if in_dictionary is None:
        in_dictionary = db_read_query(
            "SELECT 1 FROM user_dictionary WHERE user_id = ? AND word_id = ?",
            (user_id, word_id),
            fetchone=True
        )
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---
    
    translations = word_data.get('translations', [])
    primary_translation = next((t['translation_text'] for t in translations if t['is_primary']), "–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    other_translations = [t['translation_text'] for t in translations if not t['is_primary']]
    
    translation_str = primary_translation
    if other_translations:
        translation_str += f" (—Ç–∞–∫–∂–µ: {', '.join(other_translations)})"

    card_text_header = f"–°–ª–æ–≤–æ *{word_data['hebrew']}* —É–∂–µ –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ." if in_dictionary else f"–ù–∞–π–¥–µ–Ω–æ: *{word_data['hebrew']}*"
    card_text = f"{card_text_header} [{word_data.get('transcription', '')}]\n–ü–µ—Ä–µ–≤–æ–¥: {translation_str}"

    keyboard_buttons = []
    if in_dictionary:
        keyboard_buttons.append(InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"{CB_DICT_CONFIRM_DELETE}_{word_id}_0"))
    else:
        keyboard_buttons.append(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data=f"{CB_ADD}_{word_id}"))

    if word_data.get('is_verb'):
        keyboard_buttons.append(InlineKeyboardButton("üìñ –°–ø—Ä—è–∂–µ–Ω–∏—è", callback_data=f"{CB_SHOW_VERB}_{word_id}"))
    
    keyboard = [keyboard_buttons, [InlineKeyboardButton("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        if message_id:
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=card_text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await context.bot.send_message(
                chat_id=chat_id,
                text=card_text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
    except Exception as e:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫—É "Message is not modified" –∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ–µ
        if "Message is not modified" in str(e):
            logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–ª–æ–≤–∞: {e}", exc_info=True)


async def back_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await main_menu(update, context)
    return ConversationHandler.END
