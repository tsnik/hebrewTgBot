# -*- coding: utf-8 -*-
import re

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from config import (
    CB_VIEW_CARD,
    CB_SEARCH_PEALIM,
    CB_SELECT_WORD,
    CB_SHOW_ALL_VERB_FORMS,
    PERSON_MAP,
    TENSE_MAP,
    logger,
)
from services.parser import fetch_and_cache_word_data
from utils import normalize_hebrew
from handlers.common import display_word_card
from dal.unit_of_work import UnitOfWork


async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ª–æ–≤."""
    if not update.message or not update.message.text:
        return

    text = update.message.text.strip()
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    if not re.match(r"^[\u0590-\u05FF\s-]+$", text):
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏–≤—Ä–∏—Ç–∞, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã."
        )
        return
    if len(text.split()) > 1:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –æ–¥–Ω–æ–º—É —Å–ª–æ–≤—É –∑–∞ —Ä–∞–∑."
        )
        return

    normalized_text = normalize_hebrew(text)

    with UnitOfWork() as uow:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
        found_words = uow.words.find_words_by_normalized_form(normalized_text)

    # –°–ª—É—á–∞–π 1.1: –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
    if not found_words:
        await search_in_pealim(update, context, normalized_text)
        return

    # –°–ª—É—á–∞–π 1.2: –û–¥–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if len(found_words) == 1:
        word_data = found_words[0]
        await display_word_card(
            context,
            user_id,
            chat_id,
            word_data,
            show_pealim_search_button=True,  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            search_query=normalized_text,
        )
        return

    # –°–ª—É—á–∞–π 1.3: –ù–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    if len(found_words) > 1:
        message_text = "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π:"
        keyboard = []
        for word in found_words:
            primary_translation = next(
                (t.translation_text for t in word.translations if t.is_primary), ""
            )
            button_text = f"{word.hebrew} - {primary_translation}"
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –¥–ª—è callback
            keyboard.append(
                [
                    InlineKeyboardButton(
                        button_text,
                        callback_data=f"{CB_SELECT_WORD}:{word.word_id}:{normalized_text}",
                    )
                ]
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞ –≤ Pealim
        keyboard.append(
            [
                InlineKeyboardButton(
                    "üîé –ò—Å–∫–∞—Ç—å –µ—â–µ –≤ Pealim",
                    callback_data=f"{CB_SEARCH_PEALIM}:{normalized_text}",
                )
            ]
        )

        await update.message.reply_text(
            message_text, reply_markup=InlineKeyboardMarkup(keyboard)
        )


async def search_in_pealim(
    update: Update, context: ContextTypes.DEFAULT_TYPE, query: str
):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ —Å–ª–æ–≤–∞ –≤–æ –≤–Ω–µ—à–Ω–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–µ."""
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —ç—Ç–æ callback
    if update.message:
        status_message = await update.message.reply_text(
            "üîé –ò—â—É —Å–ª–æ–≤–æ –≤–æ –≤–Ω–µ—à–Ω–µ–º —Å–ª–æ–≤–∞—Ä–µ..."
        )
        message_id = status_message.message_id
    else:  # –ï—Å–ª–∏ —ç—Ç–æ callback_query
        await update.callback_query.answer()
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–∏—à–µ–ª callback
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=update.callback_query.message.message_id,
            text="üîé –ò—â—É —Å–ª–æ–≤–æ –≤–æ –≤–Ω–µ—à–Ω–µ–º —Å–ª–æ–≤–∞—Ä–µ...",
        )
        message_id = update.callback_query.message.message_id

    status, data_list = await fetch_and_cache_word_data(query)

    if status == "ok" and data_list:
        if len(data_list) == 1:
            await display_word_card(
                context, user_id, chat_id, data_list[0], message_id=message_id
            )
        else:
            message_text = (
                "–í–æ –≤–Ω–µ—à–Ω–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π:"
            )
            keyboard = []
            for word in data_list:
                primary_translation = word.translations[0].translation_text
                button_text = f"{word.hebrew} - {primary_translation}"
                keyboard.append(
                    [
                        InlineKeyboardButton(
                            button_text,
                            # –í–∞–∂–Ω–æ! –ò—Å–ø–æ–ª—å–∑—É–µ–º word_id, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –ø—Ä–∏—Å–≤–æ–µ–Ω –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î
                            callback_data=f"{CB_SELECT_WORD}:{word.word_id}:{query}",
                        )
                    ]
                )

            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=message_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
            )
    elif status == "not_found":
        await context.bot.edit_message_text(
            f"–°–ª–æ–≤–æ '{query}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            chat_id=chat_id,
            message_id=message_id,
        )
    elif status == "error":
        await context.bot.edit_message_text(
            "–í–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å —Å–ª–æ–≤–∞—Ä—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∑–∂–µ.",
            chat_id=chat_id,
            message_id=message_id,
        )
    elif status == "db_error":
        await context.bot.edit_message_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ª–æ–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            chat_id=chat_id,
            message_id=message_id,
        )


async def pealim_search_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ò—Å–∫–∞—Ç—å –µ—â–µ –≤ Pealim'."""
    query_data = update.callback_query.data.split(":")
    search_query = query_data[2]
    await search_in_pealim(update, context, search_query)


async def select_word_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤."""
    query = update.callback_query
    await query.answer()

    logger.info(query.data)

    _, _, word_id_str, search_query = query.data.split(":")
    word_id = int(word_id_str)

    user_id = query.from_user.id
    chat_id = query.message.chat_id

    with UnitOfWork() as uow:
        word_data = uow.words.get_word_by_id(word_id)

    if word_data:
        await display_word_card(
            context,
            user_id,
            chat_id,
            word_data,
            message_id=query.message.message_id,
            show_pealim_search_button=True,  # –¢–∞–∫–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            search_query=search_query,
        )
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ.")


async def add_word_to_dictionary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å'."""
    query = update.callback_query
    await query.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ!")

    word_id = int(query.data.split(":")[2])
    user_id = query.from_user.id

    with UnitOfWork() as uow:
        uow.user_dictionary.add_word_to_dictionary(user_id, word_id)
        uow.commit()
        word_data = uow.words.get_word_by_id(word_id)

    if word_data:
        word_dict = word_data
        await display_word_card(
            context,
            user_id,
            query.message.chat_id,
            word_dict,
            message_id=query.message.message_id,
            in_dictionary=True,
        )


async def show_verb_conjugations(
    update: Update, context: ContextTypes.DEFAULT_TYPE, show_all: bool = False
):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å–ø—Ä—è–∂–µ–Ω–∏–π –¥–ª—è –≥–ª–∞–≥–æ–ª–∞ —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()

    word_id = int(query.data.split(":")[-1])
    user_id = query.from_user.id

    with UnitOfWork() as uow:
        word_hebrew = uow.words.get_word_hebrew_by_id(word_id)
        all_conjugations = uow.words.get_conjugations_for_word(word_id)

        user_settings = uow.user_settings.get_user_settings(user_id)
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç
        if not user_settings.tense_settings:
            uow.user_settings.initialize_tense_settings(user_id)
            uow.commit()
            user_settings = uow.user_settings.get_user_settings(user_id)

        active_tenses = user_settings.get_active_tenses()

    keyboard = [
        [
            InlineKeyboardButton(
                "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ª–æ–≤—É", callback_data=f"{CB_VIEW_CARD}:{word_id}"
            )
        ]
    ]

    if not all_conjugations or not word_hebrew:
        await query.edit_message_text(
            "–î–ª—è —ç—Ç–æ–≥–æ –≥–ª–∞–≥–æ–ª–∞ –Ω–µ—Ç —Ç–∞–±–ª–∏—Ü—ã —Å–ø—Ä—è–∂–µ–Ω–∏–π.",
            reply_markup=InlineKeyboardMarkup(keyboard),
        )
        return

    # –†–∞–∑–¥–µ–ª—è–µ–º —Å–ø—Ä—è–∂–µ–Ω–∏—è –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ —Å–∫—Ä—ã—Ç—ã–µ
    active_conjugations = [
        c for c in all_conjugations if c.tense.value in active_tenses
    ]
    hidden_conjugations = [
        c for c in all_conjugations if c.tense.value not in active_tenses
    ]

    conjugations_to_display = all_conjugations if show_all else active_conjugations

    message_text = f"–°–ø—Ä—è–∂–µ–Ω–∏—è –¥–ª—è *{word_hebrew}*:\n"

    if not conjugations_to_display and not show_all:
        message_text = "–í—Å–µ –≤—Ä–µ–º–µ–Ω–∞ —Å–∫—Ä—ã—Ç—ã. –í–∫–ª—é—á–∏—Ç–µ –∏—Ö –≤ —Ä–∞–∑–¥–µ–ª–µ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø—Ä—è–∂–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."
    else:
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        conjugations_by_tense = {}
        for conj in conjugations_to_display:
            tense_val = conj.tense.value
            if tense_val not in conjugations_by_tense:
                conjugations_by_tense[tense_val] = []
            conjugations_by_tense[tense_val].append(conj)

        for tense, conj_list in sorted(
            conjugations_by_tense.items(),
            key=lambda item: list(TENSE_MAP.keys()).index(item[0]),
        ):
            tense_display = TENSE_MAP.get(tense, tense)
            message_text += f"\n*{tense_display.capitalize()}*:\n"
            for conj in conj_list:
                person_display = PERSON_MAP.get(conj.person.value, conj.person.value)
                message_text += (
                    f"_{person_display}_: {conj.hebrew_form} ({conj.transcription})\n"
                )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ", –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if not show_all and hidden_conjugations:
        keyboard.insert(
            0,
            [
                InlineKeyboardButton(
                    "üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞",
                    callback_data=f"{CB_SHOW_ALL_VERB_FORMS}:{word_id}",
                )
            ],
        )

    if len(message_text) > 4096:
        message_text = message_text[:4090] + "\n(...)"

    await query.edit_message_text(
        message_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN,
    )


async def show_all_verb_forms_handler(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ü–æ–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞'."""
    await show_verb_conjugations(update, context, show_all=True)


async def view_word_card_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ä—Ç–æ—á–∫–µ —Å–ª–æ–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–ø—Ä—è–∂–µ–Ω–∏–π)."""
    query = update.callback_query
    await query.answer()

    word_id = int(query.data.split(":")[-1])
    user_id = query.from_user.id
    chat_id = query.message.chat_id
    message_id = query.message.message_id

    with UnitOfWork() as uow:
        word_data = uow.words.get_word_by_id(word_id)

    if word_data:
        word_dict = word_data
        await display_word_card(
            context, user_id, chat_id, word_data=word_dict, message_id=message_id
        )
    else:
        await query.edit_message_text(
            "–û—à–∏–±–∫–∞: —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
            ),
        )
