import pytest
from unittest.mock import MagicMock, AsyncMock, patch
from datetime import datetime

# –≠—Ç–∏ –∏–º–ø–æ—Ä—Ç—ã –≤–µ—Ä–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –æ—Ç—Ä–∞–∂–∞—é—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
from dal.models import CachedWord, Translation
from handlers.common import start, main_menu
from handlers.dictionary import (
    view_dictionary_page_handler,
    confirm_delete_word,
    execute_delete_word,
)
from handlers.search import (
    handle_text_message,
    add_word_to_dictionary,
    show_verb_conjugations,
)

from handlers.training import (
    training_menu,
    start_flashcard_training,
    show_next_card,
    handle_self_evaluation,
    start_verb_trainer,
    end_training,
    check_verb_answer,
)

# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç display_word_card –¥–ª—è –ø—Ä—è–º–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
from handlers.common import display_word_card
from config import CB_EVAL_CORRECT, CB_EVAL_INCORRECT, VERB_TRAINER_RETRY_ATTEMPTS


# --- –¢–µ—Å—Ç—ã –¥–ª—è –æ–±—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (–Ω–µ —Ç—Ä–µ–±—É—é—Ç –ø–∞—Ç—á–∏–Ω–≥–∞ –ë–î) ---


@pytest.mark.asyncio
async def test_start():
    update = AsyncMock()
    update.effective_user.first_name = "Test"
    update.effective_user.id = 123
    update.effective_user.username = "testuser"
    context = MagicMock()

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±—Ä–∞–Ω –ø—Ä–µ—Ñ–∏–∫—Å 'app.'
    with patch("handlers.common.UnitOfWork") as mock_uow_class:
        mock_uow_instance = mock_uow_class.return_value.__enter__.return_value

        await start(update, context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î
        mock_uow_instance.user_dictionary.add_user.assert_called_once_with(
            123, "Test", "testuser"
        )
        mock_uow_instance.commit.assert_called_once()

    update.message.reply_text.assert_called_once()
    assert "–ü—Ä–∏–≤–µ—Ç, Test!" in update.message.reply_text.call_args.args[0]


@pytest.mark.asyncio
async def test_main_menu():
    update = AsyncMock()
    context = MagicMock()

    await main_menu(update, context)

    update.callback_query.answer.assert_called_once()
    update.callback_query.edit_message_text.assert_called_once()
    assert "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" in update.callback_query.edit_message_text.call_args.args[0]


@pytest.mark.asyncio
@pytest.mark.parametrize(
    "word_data, in_dictionary, message_id, expected_text_parts, expected_buttons",
    [
        # --- –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ù–æ–≤–æ–µ —Å–ª–æ–≤–æ (–Ω–µ –≤ —Å–ª–æ–≤–∞—Ä–µ), –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ---
        (
            {
                "word_id": 1,
                "hebrew": "◊ó◊ì◊©",
                "transcription": "chadash",
                "part_of_speech": "adjective",
                "translations": [{"translation_text": "new", "is_primary": True}],
                "masculine_singular": "◊ó◊ì◊©",
                "feminine_singular": "◊ó◊ì◊©◊î",
            },
            False,
            None,
            ["–ù–∞–π–¥–µ–Ω–æ: *◊ó◊ì◊©*", "–∂.—Ä., –µ–¥.—á.: ◊ó◊ì◊©◊î"],
            ["‚ûï –î–æ–±–∞–≤–∏—Ç—å", "‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"],
        ),
        # --- –°—Ü–µ–Ω–∞—Ä–∏–π 2: –°–ª–æ–≤–æ —É–∂–µ –≤ —Å–ª–æ–≤–∞—Ä–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ---
        (
            {
                "word_id": 2,
                "hebrew": "◊ô◊©◊ü",
                "transcription": "yashan",
                "part_of_speech": "noun",
                "translations": [{"translation_text": "old", "is_primary": True}],
                "gender": "masculine",
                "plural_form": "◊ô◊©◊†◊ô◊ù",
            },
            True,
            12345,
            ["–°–ª–æ–≤–æ *◊ô◊©◊ü* —É–∂–µ –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ", "–†–æ–¥: –ú—É–∂—Å–∫–æ–π —Ä–æ–¥", "–ú–Ω. —á–∏—Å–ª–æ: ◊ô◊©◊†◊ô◊ù"],
            ["üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", "‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"],
        ),
        # --- –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ì–ª–∞–≥–æ–ª, –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–ø—Ä—è–∂–µ–Ω–∏—è" ---
        (
            {
                "word_id": 3,
                "hebrew": "◊ú◊õ◊™◊ï◊ë",
                "transcription": "lichtov",
                "part_of_speech": "verb",
                "translations": [{"translation_text": "to write", "is_primary": True}],
                "root": "◊õ.◊™.◊ë",
                "binyan": "pa'al",
            },
            False,
            None,
            ["–ù–∞–π–¥–µ–Ω–æ: *◊ú◊õ◊™◊ï◊ë*", "\n–ö–æ—Ä–µ–Ω—å: ◊õ.◊™.◊ë", "\n–ë–∏–Ω—å—è–Ω: pa'al"],
            ["‚ûï –î–æ–±–∞–≤–∏—Ç—å", "üìñ –°–ø—Ä—è–∂–µ–Ω–∏—è", "‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"],
        ),
    ],
)
async def test_display_word_card(
    word_data, in_dictionary, message_id, expected_text_parts, expected_buttons
):
    """–¢–µ—Å—Ç: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–ª–æ–≤–∞."""
    context = AsyncMock()
    user_id = 123
    chat_id = 456

    # –ú–æ–∫–∞–µ–º UnitOfWork —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å –¥—Ä—É–≥–∏–º —Ç–µ—Å—Ç–∞–º
    with patch("handlers.common.UnitOfWork") as mock_uow_class:
        mock_uow_instance = mock_uow_class.return_value.__enter__.return_value
        mock_uow_instance.user_dictionary.is_word_in_dictionary.return_value = (
            in_dictionary
        )

        await display_word_card(
            context,
            user_id,
            chat_id,
            word_data,
            message_id,
            # –ü–µ—Ä–µ–¥–∞–µ–º in_dictionary=None, —á—Ç–æ–±—ã —Å–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤,
            # –≥–¥–µ —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏
            in_dictionary=None,
        )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–∑–≤–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥: edit –∏–ª–∏ send
    if message_id:
        context.bot.edit_message_text.assert_called_once()
        context.bot.send_message.assert_not_called()
        call_kwargs = context.bot.edit_message_text.call_args.kwargs
    else:
        context.bot.send_message.assert_called_once()
        context.bot.edit_message_text.assert_not_called()
        call_kwargs = context.bot.send_message.call_args.kwargs

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    sent_text = call_kwargs["text"]
    for part in expected_text_parts:
        assert part in sent_text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏
    sent_buttons = call_kwargs["reply_markup"].inline_keyboard
    # "–°–ø–ª—é—â–∏–≤–∞–µ–º" –º–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫ –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
    sent_button_texts = [btn.text for row in sent_buttons for btn in row]
    assert sent_button_texts == expected_buttons


# --- –¢–µ—Å—Ç—ã –¥–ª—è —Å–ª–æ–≤–∞—Ä—è (Dictionary Handlers) ---


@pytest.mark.asyncio
async def test_view_dictionary_page_handler_with_words():
    """–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–ª–æ–≤–∞—Ä—è, –∫–æ–≥–¥–∞ —Å–ª–æ–≤–∞ –µ—Å—Ç—å."""
    update = AsyncMock()
    update.callback_query.data = "dict:view:0"
    update.callback_query.from_user.id = 123
    context = MagicMock()

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±—Ä–∞–Ω –ø—Ä–µ—Ñ–∏–∫—Å 'app.'
    with patch("handlers.dictionary.UnitOfWork") as mock_uow_class:
        mock_uow_instance = mock_uow_class.return_value.__enter__.return_value
        mock_uow_instance.user_dictionary.get_dictionary_page.return_value = [
            CachedWord(
                word_id=1,
                hebrew="◊©◊ú◊ï◊ù",
                normalized_hebrew="◊©◊ú◊ï◊ù",
                is_verb=False,
                fetched_at=datetime.now(),
                translations=[
                    Translation(
                        translation_id=1,
                        word_id=1,
                        translation_text="–ø—Ä–∏–≤–µ—Ç",
                        is_primary=True,
                    )
                ],
            ),
            CachedWord(
                word_id=2,
                hebrew="◊õ◊ú◊ë",
                normalized_hebrew="◊õ◊ú◊ë",
                is_verb=False,
                fetched_at=datetime.now(),
                translations=[
                    Translation(
                        translation_id=2,
                        word_id=2,
                        translation_text="—Å–æ–±–∞–∫–∞",
                        is_primary=True,
                    )
                ],
            ),
        ]

        await view_dictionary_page_handler(update, context)

    update.callback_query.edit_message_text.assert_called_once()
    call_text = update.callback_query.edit_message_text.call_args.args[0]
    assert "–í–∞—à —Å–ª–æ–≤–∞—Ä—å (—Å—Ç—Ä. 1):" in call_text
    assert "‚Ä¢ ◊©◊ú◊ï◊ù ‚Äî –ø—Ä–∏–≤–µ—Ç" in call_text
    assert "‚Ä¢ ◊õ◊ú◊ë ‚Äî —Å–æ–±–∞–∫–∞" in call_text


@pytest.mark.asyncio
async def test_view_dictionary_page_handler_empty():
    """–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è, –∫–æ–≥–¥–∞ –æ–Ω –ø—É—Å—Ç."""
    update = AsyncMock()
    update.callback_query.data = "dict:view:0"
    update.callback_query.from_user.id = 123
    context = MagicMock()

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±—Ä–∞–Ω –ø—Ä–µ—Ñ–∏–∫—Å 'app.'
    with patch("handlers.dictionary.UnitOfWork") as mock_uow_class:
        mock_uow_instance = mock_uow_class.return_value.__enter__.return_value
        mock_uow_instance.user_dictionary.get_dictionary_page.return_value = []

        await view_dictionary_page_handler(update, context)

    update.callback_query.edit_message_text.assert_called_once()
    assert (
        "–í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç" in update.callback_query.edit_message_text.call_args.args[0]
    )


@pytest.mark.asyncio
async def test_delete_word_flow():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞."""
    update = AsyncMock()
    context = MagicMock()
    user_id = 123
    word_id_to_delete = 1
    page = 0
    update.callback_query.from_user.id = user_id

    # --- –®–∞–≥ 1: –í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è ---
    update.callback_query.data = f"dict:delete_mode:{page}"
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±—Ä–∞–Ω –ø—Ä–µ—Ñ–∏–∫—Å 'app.'
    with patch("handlers.dictionary.UnitOfWork") as mock_uow_class:
        mock_uow_instance = mock_uow_class.return_value.__enter__.return_value
        mock_uow_instance.user_dictionary.get_dictionary_page.return_value = [
            CachedWord(
                word_id=word_id_to_delete,
                hebrew="◊©◊ú◊ï◊ù",
                normalized_hebrew="◊©◊ú◊ï◊ù",
                is_verb=False,
                fetched_at=datetime.now(),
                translations=[
                    Translation(
                        translation_id=1,
                        word_id=word_id_to_delete,
                        translation_text="hello",
                        is_primary=True,
                    )
                ],
            )
        ]
        await view_dictionary_page_handler(update, context)

    update.callback_query.edit_message_text.assert_called_once()
    assert (
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
        in update.callback_query.edit_message_text.call_args.args[0]
    )
    update.callback_query.reset_mock()

    # --- –®–∞–≥ 2: –í—ã–±–æ—Ä —Å–ª–æ–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–æ—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è) ---
    update.callback_query.data = f"dict:confirm_delete:{word_id_to_delete}:{page}"
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±—Ä–∞–Ω –ø—Ä–µ—Ñ–∏–∫—Å 'app.'
    with patch("handlers.dictionary.UnitOfWork") as mock_uow_class:
        mock_uow_instance = mock_uow_class.return_value.__enter__.return_value
        mock_uow_instance.words.get_word_hebrew_by_id.return_value = "◊©◊ú◊ï◊ù"
        await confirm_delete_word(update, context)

    update.callback_query.edit_message_text.assert_called_once()
    assert (
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ '◊©◊ú◊ï◊ù'"
        in update.callback_query.edit_message_text.call_args.args[0]
    )
    update.callback_query.reset_mock()

    # --- –®–∞–≥ 3: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ ---
    update.callback_query.data = f"dict:execute_delete:{word_id_to_delete}:{page}"
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±—Ä–∞–Ω –ø—Ä–µ—Ñ–∏–∫—Å 'app.'
    with patch("handlers.dictionary.UnitOfWork") as mock_uow_class:
        mock_uow_instance = mock_uow_class.return_value.__enter__.return_value
        mock_uow_instance.user_dictionary.get_dictionary_page.return_value = []
        await execute_delete_word(update, context)

    mock_uow_instance.user_dictionary.remove_word_from_dictionary.assert_called_once_with(
        user_id, word_id_to_delete
    )
    mock_uow_instance.commit.assert_called_once()

    update.callback_query.edit_message_text.assert_called_once()
    assert (
        "–í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç" in update.callback_query.edit_message_text.call_args.args[0]
    )


# --- –¢–µ—Å—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ (Search Handlers) ---


@pytest.mark.asyncio
async def test_add_word_to_dictionary():
    update = AsyncMock()
    update.callback_query.data = "word:add:1"
    user_id = 123
    word_id = 1
    update.callback_query.from_user.id = user_id
    context = MagicMock()

    mock_word_data = CachedWord(
        word_id=word_id,
        hebrew="◊©◊ú◊ï◊ù",
        normalized_hebrew="◊©◊ú◊ï◊ù",
        is_verb=False,
        fetched_at=datetime.now(),
        translations=[
            Translation(
                translation_id=101,
                word_id=word_id,
                translation_text="hello",
                is_primary=True,
                context_comment=None,
            )
        ],
        conjugations=[],
    )

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±—Ä–∞–Ω –ø—Ä–µ—Ñ–∏–∫—Å 'app.'
    with patch("handlers.search.UnitOfWork") as mock_uow_class:
        mock_uow_instance = mock_uow_class.return_value.__enter__.return_value
        mock_uow_instance.words.get_word_by_id.return_value = mock_word_data

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±—Ä–∞–Ω –ø—Ä–µ—Ñ–∏–∫—Å 'app.'
        with patch("handlers.search.display_word_card") as mock_display:
            await add_word_to_dictionary(update, context)

    mock_uow_instance.user_dictionary.add_word_to_dictionary.assert_called_once_with(
        user_id, word_id
    )
    mock_uow_instance.commit.assert_called_once()
    mock_display.assert_called_once()


@pytest.mark.asyncio
async def test_handle_text_message_word_not_in_db_found_externally():
    update = AsyncMock()
    update.message.text = "◊ó◊ì◊©"
    update.effective_user.id = 123
    context = MagicMock()
    context.bot.edit_message_text = AsyncMock()

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±—Ä–∞–Ω –ø—Ä–µ—Ñ–∏–∫—Å 'app.'
    with patch("handlers.search.UnitOfWork") as mock_uow_class:
        mock_uow_instance = mock_uow_class.return_value.__enter__.return_value
        mock_uow_instance.words.find_word_by_normalized_form.return_value = None

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±—Ä–∞–Ω –ø—Ä–µ—Ñ–∏–∫—Å 'app.'
        with patch("handlers.search.fetch_and_cache_word_data") as mock_fetch:
            mock_fetch.return_value = (
                "ok",
                {"word_id": 99, "hebrew": "◊ó◊ì◊©", "translations": []},
            )

            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±—Ä–∞–Ω –ø—Ä–µ—Ñ–∏–∫—Å 'app.'
            with patch("handlers.search.display_word_card") as mock_display:
                await handle_text_message(update, context)

    update.message.reply_text.assert_called_once_with(
        "üîé –ò—â—É —Å–ª–æ–≤–æ –≤–æ –≤–Ω–µ—à–Ω–µ–º —Å–ª–æ–≤–∞—Ä–µ..."
    )
    mock_fetch.assert_called_once()
    mock_display.assert_called_once()


# --- –¢–µ—Å—Ç—ã –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (Training Handlers) ---


@pytest.mark.asyncio
async def test_start_flashcard_training_no_words():
    update = AsyncMock()
    update.callback_query = AsyncMock()
    update.callback_query.data = "train:he_ru"
    update.callback_query.from_user.id = 123
    context = MagicMock()

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±—Ä–∞–Ω –ø—Ä–µ—Ñ–∏–∫—Å 'app.'
    with patch("handlers.training.UnitOfWork") as mock_uow_class:
        mock_uow_instance = mock_uow_class.return_value.__enter__.return_value
        mock_uow_instance.user_dictionary.get_user_words_for_training.return_value = []

        await start_flashcard_training(update, context)

    update.callback_query.edit_message_text.assert_called_once()
    assert (
        "–í —Å–ª–æ–≤–∞—Ä–µ –Ω–µ—Ç —Å–ª–æ–≤"
        in update.callback_query.edit_message_text.call_args.args[0]
    )


@pytest.mark.asyncio
async def test_start_verb_trainer_no_verbs():
    update = AsyncMock()
    update.callback_query = AsyncMock()
    user_id = 123
    update.callback_query.from_user.id = user_id
    context = MagicMock()

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±—Ä–∞–Ω –ø—Ä–µ—Ñ–∏–∫—Å 'app.'
    with patch("handlers.training.UnitOfWork") as mock_uow_class:
        mock_uow_instance = mock_uow_class.return_value.__enter__.return_value
        mock_uow_instance.words.get_random_verb_for_training.return_value = None

        await start_verb_trainer(update, context)

    mock_uow_instance.words.get_random_verb_for_training.assert_called_with(user_id)
    update.callback_query.edit_message_text.assert_called_once()
    assert (
        "–í –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ –Ω–µ—Ç –≥–ª–∞–≥–æ–ª–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"
        in update.callback_query.edit_message_text.call_args.args[0]
    )


@pytest.mark.asyncio
@pytest.mark.parametrize(
    "text_input, error_message",
    [
        ("word", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏–≤—Ä–∏—Ç–∞, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã."),
        ("◊©◊ú◊ï◊ù ◊ú◊ö", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –æ–¥–Ω–æ–º—É —Å–ª–æ–≤—É –∑–∞ —Ä–∞–∑."),
    ],
)
async def test_handle_text_message_invalid_input(text_input, error_message):
    """–¢–µ—Å—Ç: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –≤–≤–æ–¥–∞ (–Ω–µ-–∏–≤—Ä–∏—Ç, –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤)."""
    update = AsyncMock()
    update.message.text = text_input
    context = MagicMock()

    await handle_text_message(update, context)

    update.message.reply_text.assert_called_once_with(error_message)


@pytest.mark.asyncio
async def test_handle_text_message_word_in_db():
    """–¢–µ—Å—Ç: —Å–ª–æ–≤–æ –Ω–∞–π–¥–µ–Ω–æ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    update = AsyncMock()
    update.message.text = "◊©◊ú◊ï◊ù"
    update.effective_user.id = 123
    context = MagicMock()

    mock_word_data = MagicMock()
    mock_word_data.model_dump.return_value = {"word_id": 1, "hebrew": "◊©◊ú◊ï◊ù"}

    with patch("handlers.search.UnitOfWork") as mock_uow_class:
        mock_uow_instance = mock_uow_class.return_value.__enter__.return_value
        mock_uow_instance.words.find_word_by_normalized_form.return_value = (
            mock_word_data
        )

        with patch("handlers.search.display_word_card") as mock_display:
            await handle_text_message(update, context)

            mock_uow_instance.words.find_word_by_normalized_form.assert_called_once_with(
                "◊©◊ú◊ï◊ù"
            )
            mock_display.assert_called_once()


@pytest.mark.asyncio
@pytest.mark.parametrize(
    "status, message",
    [
        ("not_found", "–°–ª–æ–≤–æ '◊û◊ô◊ú◊î' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."),
        (
            "error",
            "–í–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å —Å–ª–æ–≤–∞—Ä—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∑–∂–µ.",
        ),
        (
            "db_error",
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ª–æ–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        ),
    ],
)
async def test_handle_text_message_external_search_failures(status, message):
    """–¢–µ—Å—Ç: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫ –æ—Ç –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞."""
    update = AsyncMock()
    update.message.text = "◊û◊ô◊ú◊î"
    update.effective_chat.id = 12345
    context = AsyncMock()

    # –ú–æ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-—Å—Ç–∞—Ç—É—Å, —á—Ç–æ–±—ã —É –Ω–µ–≥–æ –±—ã–ª message_id –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    status_message = AsyncMock()
    status_message.message_id = 54321
    update.message.reply_text.return_value = status_message

    with patch("handlers.search.UnitOfWork") as mock_uow_class:
        mock_uow_instance = mock_uow_class.return_value.__enter__.return_value
        mock_uow_instance.words.find_word_by_normalized_form.return_value = None

        with patch(
            "handlers.search.fetch_and_cache_word_data", new_callable=AsyncMock
        ) as mock_fetch:
            mock_fetch.return_value = (status, None)

            await handle_text_message(update, context)

            update.message.reply_text.assert_called_once_with(
                "üîé –ò—â—É —Å–ª–æ–≤–æ –≤–æ –≤–Ω–µ—à–Ω–µ–º —Å–ª–æ–≤–∞—Ä–µ..."
            )
            context.bot.edit_message_text.assert_called_once_with(
                message, chat_id=12345, message_id=54321
            )


@pytest.mark.asyncio
async def test_show_verb_conjugations_success():
    """–¢–µ—Å—Ç: —É—Å–ø–µ—à–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø—Ä—è–∂–µ–Ω–∏–π –≥–ª–∞–≥–æ–ª–∞."""
    update = AsyncMock()
    update.callback_query.data = "verb:show:1"
    context = MagicMock()
    word_id = 1

    mock_conjugations = [
        MagicMock(
            tense="PAST",
            person="1st singular",
            hebrew_form="◊ê◊†◊ô ◊î◊ô◊ô◊™◊ô",
            transcription="ani hayiti",
        )
    ]

    with patch("handlers.search.UnitOfWork") as mock_uow_class:
        mock_uow_instance = mock_uow_class.return_value.__enter__.return_value
        mock_uow_instance.words.get_word_hebrew_by_id.return_value = "◊ú◊î◊ô◊ï◊™"
        mock_uow_instance.words.get_conjugations_for_word.return_value = (
            mock_conjugations
        )

        await show_verb_conjugations(update, context)

        mock_uow_instance.words.get_conjugations_for_word.assert_called_once_with(
            word_id
        )
        update.callback_query.answer.assert_called_once()
        update.callback_query.edit_message_text.assert_called_once()

        call_args, call_kwargs = update.callback_query.edit_message_text.call_args
        assert "–°–ø—Ä—è–∂–µ–Ω–∏—è –¥–ª—è *◊ú◊î◊ô◊ï◊™*" in call_args[0]
        assert "*Past*:" in call_args[0]
        assert "_1st singular_: ◊ê◊†◊ô ◊î◊ô◊ô◊™◊ô (ani hayiti)" in call_args[0]


@pytest.mark.asyncio
async def test_show_verb_conjugations_not_found():
    """–¢–µ—Å—Ç: —Å–ø—Ä—è–∂–µ–Ω–∏—è –¥–ª—è –≥–ª–∞–≥–æ–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."""
    update = AsyncMock()
    update.callback_query.data = "verb:show:2"
    context = MagicMock()

    with patch("handlers.search.UnitOfWork") as mock_uow_class:
        mock_uow_instance = mock_uow_class.return_value.__enter__.return_value
        mock_uow_instance.words.get_conjugations_for_word.return_value = []

        await show_verb_conjugations(update, context)

        update.callback_query.edit_message_text.assert_called_once()
        assert (
            "–î–ª—è —ç—Ç–æ–≥–æ –≥–ª–∞–≥–æ–ª–∞ –Ω–µ—Ç —Ç–∞–±–ª–∏—Ü—ã —Å–ø—Ä—è–∂–µ–Ω–∏–π"
            in update.callback_query.edit_message_text.call_args.args[0]
        )


@pytest.mark.asyncio
async def test_start_flashcard_training_with_words():
    """–¢–µ—Å—Ç: —É—Å–ø–µ—à–Ω–æ–µ –Ω–∞—á–∞–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –∫–æ–≥–¥–∞ –µ—Å—Ç—å —Å–ª–æ–≤–∞."""
    update = AsyncMock()
    update.callback_query.data = "train:he_ru"
    update.callback_query.from_user.id = 123
    context = MagicMock()
    context.user_data = {}

    mock_words = [
        CachedWord(
            word_id=1,
            hebrew="◊©◊ú◊ï◊ù",
            normalized_hebrew="◊©◊ú◊ï◊ù",
            is_verb=False,
            fetched_at=datetime.now(),
            translations=[
                Translation(
                    translation_id=1,
                    word_id=1,
                    translation_text="–ø—Ä–∏–≤–µ—Ç",
                    is_primary=True,
                )
            ],
        )
    ]

    with patch("handlers.training.UnitOfWork") as mock_uow_class:
        mock_uow_instance = mock_uow_class.return_value.__enter__.return_value
        mock_uow_instance.user_dictionary.get_user_words_for_training.return_value = (
            mock_words
        )

        # –ú–æ–∫–∞–µ–º show_next_card, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ü–µ–ø–æ—á–∫–µ
        with patch(
            "handlers.training.show_next_card", new_callable=AsyncMock
        ) as mock_show_next:
            await start_flashcard_training(update, context)

            assert context.user_data["words"][0].hebrew == mock_words[0].hebrew
            assert context.user_data["training_mode"] == "train:he_ru"
            mock_show_next.assert_called_once()


@pytest.mark.asyncio
async def test_show_next_card_ends_training():
    """–¢–µ—Å—Ç: –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –∫–æ–≥–¥–∞ —Å–ª–æ–≤–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å."""
    update = AsyncMock()
    context = MagicMock()
    context.user_data = {
        "words": [],
        "idx": 0,
        "correct": 0,
        "training_mode": "train:he_ru",
    }

    await show_next_card(update, context)

    update.callback_query.edit_message_text.assert_called_once()
    assert (
        "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!"
        in update.callback_query.edit_message_text.call_args.args[0]
    )
    assert context.user_data == {}  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –æ—á–∏—â–µ–Ω—ã


@pytest.mark.asyncio
# CORRECTED: Use the imported constants instead of hardcoded strings
@pytest.mark.parametrize(
    "evaluation, expected_srs", [(CB_EVAL_CORRECT, 1), (CB_EVAL_INCORRECT, 0)]
)
async def test_handle_self_evaluation_logic(evaluation, expected_srs):
    """–¢–µ—Å—Ç: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏ (–ø—Ä–∞–≤–∏–ª—å–Ω–æ/–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ) –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ SRS."""
    update = AsyncMock()
    update.callback_query.data = evaluation  # Now uses the constant
    update.callback_query.from_user.id = 123
    context = MagicMock()
    context.user_data = {"words": [MagicMock(word_id=1)], "idx": 0, "correct": 0}

    with patch("handlers.training.UnitOfWork") as mock_uow_class:
        mock_uow_instance = mock_uow_class.return_value.__enter__.return_value
        # The current SRS level is 0 before the evaluation
        mock_uow_instance.user_dictionary.get_srs_level.return_value = 0

        with patch("handlers.training.show_next_card", new_callable=AsyncMock):
            await handle_self_evaluation(update, context)

            mock_uow_instance.user_dictionary.update_srs_level.assert_called_once()
            # This assertion will now pass because the correct logic path is triggered
            call_args, _ = mock_uow_instance.user_dictionary.update_srs_level.call_args
            assert call_args[0] == expected_srs
            mock_uow_instance.commit.assert_called_once()


@pytest.mark.asyncio
async def test_check_verb_answer_correct_and_incorrect():
    """–¢–µ—Å—Ç: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–µ –≥–ª–∞–≥–æ–ª–æ–≤."""
    # 1. –°–ª—É—á–∞–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
    update_correct = AsyncMock()
    update_correct.message.text = "◊ô◊ú◊ö"
    update_correct.effective_user.id = 123
    context_correct = MagicMock()
    context_correct.user_data = {
        "answer": MagicMock(hebrew_form="◊ô◊ú◊ö", transcription="yelekh", word_id=5)
    }

    with patch("handlers.training.UnitOfWork"):
        await check_verb_answer(update_correct, context_correct)

    update_correct.message.reply_text.assert_called_once()
    assert "‚úÖ –í–µ—Ä–Ω–æ!" in update_correct.message.reply_text.call_args.args[0]

    # 2. –°–ª—É—á–∞–π —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
    update_incorrect = AsyncMock()
    update_incorrect.message.text = "◊î◊ï◊ú◊ö"
    update_incorrect.effective_user.id = 123
    context_incorrect = MagicMock()
    context_incorrect.user_data = {
        "answer": MagicMock(hebrew_form="◊ô◊ú◊ö", transcription="yelekh", word_id=5)
    }

    with patch("handlers.training.UnitOfWork"):
        await check_verb_answer(update_incorrect, context_incorrect)

    update_incorrect.message.reply_text.assert_called_once()
    assert "‚ùå –û—à–∏–±–∫–∞." in update_incorrect.message.reply_text.call_args.args[0]


@pytest.mark.asyncio
async def test_end_training():
    """–¢–µ—Å—Ç: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏."""
    update = AsyncMock()
    context = MagicMock()

    await end_training(update, context)

    update.callback_query.answer.assert_called_once()
    update.callback_query.edit_message_text.assert_called_once()
    assert (
        "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞"
        in update.callback_query.edit_message_text.call_args.kwargs["text"]
    )


@pytest.mark.asyncio
async def test_training_menu_as_command():
    """–¢–µ—Å—Ç: –≤—ã–∑–æ–≤ –º–µ–Ω—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∫–∞–∫ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã, –∞ –Ω–µ –∫–æ–ª–±—ç–∫–∞."""
    update = AsyncMock()
    # –≠–º—É–ª–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ –Ω–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É (query is None)
    update.callback_query = None
    update.effective_chat.id = 12345
    context = MagicMock()
    context.bot.send_message = AsyncMock()

    await training_menu(update, context)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ
    context.bot.send_message.assert_called_once()
    assert (
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏" in context.bot.send_message.call_args.kwargs["text"]
    )


@pytest.mark.asyncio
async def test_start_verb_trainer_happy_path():
    """–¢–µ—Å—Ç: —É—Å–ø–µ—à–Ω–æ–µ –Ω–∞—á–∞–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≥–ª–∞–≥–æ–ª–æ–≤ —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏."""
    update = AsyncMock()
    update.callback_query.from_user.id = 123
    context = MagicMock()
    context.user_data = {}

    mock_verb = MagicMock(word_id=10, hebrew="◊ú◊õ◊™◊ï◊ë")
    mock_conjugation = MagicMock(
        tense="FUTURE",
        person="1st plural",
        hebrew_form="◊†◊õ◊™◊ï◊ë",
    )

    with patch("handlers.training.UnitOfWork") as mock_uow_class:
        mock_uow_instance = mock_uow_class.return_value.__enter__.return_value
        mock_uow_instance.words.get_random_verb_for_training.return_value = mock_verb
        mock_uow_instance.words.get_random_conjugation_for_word.return_value = (
            mock_conjugation
        )

        await start_verb_trainer(update, context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
        assert context.user_data["answer"] == mock_conjugation

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–¥–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        update.callback_query.edit_message_text.assert_called_once()

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ–º—É –∞—Ä–≥—É–º–µ–Ω—Ç—É args[0]
        call_text = update.callback_query.edit_message_text.call_args.args[0]
        assert "–ì–ª–∞–≥–æ–ª: *◊ú◊õ◊™◊ï◊ë*" in call_text
        assert "–ù–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ —Ñ–æ—Ä–º—É –¥–ª—è:\n*FUTURE, 1st plural*" in call_text


@pytest.mark.asyncio
async def test_start_verb_trainer_retry_logic():
    """–¢–µ—Å—Ç: —Ç—Ä–µ–Ω–∞–∂–µ—Ä –≥–ª–∞–≥–æ–ª–æ–≤ –Ω–∞—Ö–æ–¥–∏—Ç —Å–ø—Ä—è–∂–µ–Ω–∏–µ —Å–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–∏."""
    update = AsyncMock()
    update.callback_query.from_user.id = 123
    context = MagicMock()
    context.user_data = {}

    mock_verb_no_conj = MagicMock(word_id=11, hebrew="◊§◊ï◊¢◊ú_◊ë◊ú◊ô_◊õ◊ú◊ï◊ù")
    mock_verb_with_conj = MagicMock(word_id=12, hebrew="◊ú◊®◊ï◊•")
    mock_conjugation = MagicMock(
        tense="PRESENT",
        person="m. plural",
        hebrew_form="◊®◊¶◊ô◊ù",
    )

    with patch("handlers.training.UnitOfWork") as mock_uow_class:
        mock_uow_instance = mock_uow_class.return_value.__enter__.return_value
        # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–∞–≥–æ–ª –±–µ–∑ —Å–ø—Ä—è–∂–µ–Ω–∏–π, –≤—Ç–æ—Ä–æ–π - —Å –Ω–∏–º–∏
        mock_uow_instance.words.get_random_verb_for_training.side_effect = [
            mock_verb_no_conj,
            mock_verb_with_conj,
        ]
        # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç —Å–ø—Ä—è–∂–µ–Ω–∏–π, –≤—Ç–æ—Ä–æ–π - –Ω–∞—Ö–æ–¥–∏—Ç
        mock_uow_instance.words.get_random_conjugation_for_word.side_effect = [
            None,
            mock_conjugation,
        ]

        await start_verb_trainer(update, context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –¥–≤–∞–∂–¥—ã –ø—ã—Ç–∞–ª–∏—Å—å –Ω–∞–π—Ç–∏ –≥–ª–∞–≥–æ–ª
        assert mock_uow_instance.words.get_random_verb_for_training.call_count == 2
        # –ò –¥–≤–∞–∂–¥—ã –ø—ã—Ç–∞–ª–∏—Å—å –Ω–∞–π—Ç–∏ —Å–ø—Ä—è–∂–µ–Ω–∏–µ
        assert mock_uow_instance.words.get_random_conjugation_for_word.call_count == 2

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –∏—Ç–æ–≥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–∫–∞–∑–∞–ª–∏ –≤—Ç–æ—Ä–æ–π, "—É–¥–∞—á–Ω—ã–π" –≥–ª–∞–≥–æ–ª
        update.callback_query.edit_message_text.assert_called_once()

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ–º—É –∞—Ä–≥—É–º–µ–Ω—Ç—É args[0]
        call_text = update.callback_query.edit_message_text.call_args.args[0]
        assert "–ì–ª–∞–≥–æ–ª: *◊ú◊®◊ï◊•*" in call_text
        assert "PRESENT, m. plural" in call_text


@pytest.mark.asyncio
async def test_start_verb_trainer_fails_after_retries():
    """–¢–µ—Å—Ç: —Ç—Ä–µ–Ω–∞–∂–µ—Ä –≥–ª–∞–≥–æ–ª–æ–≤ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç —Å–ø—Ä—è–∂–µ–Ω–∏–π –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫."""
    update = AsyncMock()
    update.callback_query.from_user.id = 123
    context = MagicMock()

    mock_verb = MagicMock(word_id=11, hebrew="◊§◊ï◊¢◊ú_◊ë◊ú◊ô_◊õ◊ú◊ï◊ù")

    with patch("handlers.training.UnitOfWork") as mock_uow_class:
        mock_uow_instance = mock_uow_class.return_value.__enter__.return_value
        # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –≥–ª–∞–≥–æ–ª
        mock_uow_instance.words.get_random_verb_for_training.return_value = mock_verb
        # –ù–æ –¥–ª—è –Ω–µ–≥–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–ø—Ä—è–∂–µ–Ω–∏–π
        mock_uow_instance.words.get_random_conjugation_for_word.return_value = None

        await start_verb_trainer(update, context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ —Ä–æ–≤–Ω–æ VERB_TRAINER_RETRY_ATTEMPTS –ø–æ–ø—ã—Ç–æ–∫
        assert (
            mock_uow_instance.words.get_random_verb_for_training.call_count
            == VERB_TRAINER_RETRY_ATTEMPTS
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        update.callback_query.edit_message_text.assert_called_once()

        # CORRECTED: Access the first positional argument instead of a keyword argument
        call_text = update.callback_query.edit_message_text.call_args.args[0]
        assert "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≥–ª–∞–≥–æ–ª –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏" in call_text


@pytest.mark.asyncio
async def test_check_verb_answer_no_context():
    """–¢–µ—Å—Ç: –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≥–ª–∞–≥–æ–ª–∞ –ø—Ä–∏ –ø—É—Å—Ç–æ–º user_data (–∑–∞—â–∏—Ç–∞ –æ—Ç –æ—à–∏–±–æ–∫)."""
    update = AsyncMock()
    context = MagicMock()
    # `answer` –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ user_data
    context.user_data = {}

    # –ú–æ–∫–∞–µ–º training_menu, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–µ–ª –≤—ã—Ö–æ–¥ –≤ –Ω–µ–≥–æ
    with patch("handlers.training.training_menu", new_callable=AsyncMock) as mock_menu:
        await check_verb_answer(update, context)
        mock_menu.assert_called_once()
