import pytest
from unittest.mock import AsyncMock, patch, MagicMock

from handlers.settings import (
    settings_menu,
    manage_tenses_menu,
    toggle_tense,
    toggle_training_mode_handler,
)
from dal.models import UserSettings, UserTenseSetting, Tense
from config import (
    CB_TENSE_TOGGLE,
    CB_TOGGLE_TRAINING_MODE,
)


@pytest.mark.asyncio
async def test_settings_menu(monkeypatch):
    """–¢–µ—Å—Ç: –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã,
    –≤–∫–ª—é—á–∞—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å —Ä–µ–∂–∏–º–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏."""
    update = AsyncMock()
    update.callback_query.from_user.id = 123
    context = MagicMock()

    # –ú–æ–¥–µ–ª–∏—Ä—É–µ–º –¥–≤–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    mock_settings_off = UserSettings(user_id=123, use_grammatical_forms=False)
    mock_settings_on = UserSettings(user_id=123, use_grammatical_forms=True)

    descriptive_text = "–í –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–º —Ä–µ–∂–∏–º–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"  # –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

    with patch("handlers.settings.UnitOfWork") as mock_uow_class:
        mock_uow = mock_uow_class.return_value.__enter__.return_value

        # --- –°—Ü–µ–Ω–∞—Ä–∏–π 1: –†–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Ñ–æ—Ä–º –í–´–ö–õ–Æ–ß–ï–ù ---
        mock_uow.user_settings.get_user_settings.return_value = mock_settings_off
        await settings_menu(update, context)

        update.callback_query.edit_message_text.assert_called_once()
        call_kwargs_off = update.callback_query.edit_message_text.call_args.kwargs
        keyboard_off = call_kwargs_off["reply_markup"].inline_keyboard

        assert "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" in call_kwargs_off["text"]
        assert descriptive_text in call_kwargs_off["text"]
        assert len(keyboard_off) == 3  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–æ–∫ —Ç–µ–ø–µ—Ä—å —Ç—Ä–∏
        assert "üï∞Ô∏è –ú–æ–∏ –≤—Ä–µ–º–µ–Ω–∞ –≥–ª–∞–≥–æ–ª–æ–≤" in keyboard_off[0][0].text
        assert "üîÑ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ä–µ–∂–∏–º: ‚¨úÔ∏è –í—ã–∫–ª" in keyboard_off[1][0].text
        assert "‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" in keyboard_off[2][0].text

        update.callback_query.edit_message_text.reset_mock()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏

        # --- –°—Ü–µ–Ω–∞—Ä–∏–π 2: –†–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Ñ–æ—Ä–º –í–ö–õ–Æ–ß–ï–ù ---
        mock_uow.user_settings.get_user_settings.return_value = mock_settings_on
        await settings_menu(update, context)

        update.callback_query.edit_message_text.assert_called_once()
        call_kwargs_on = update.callback_query.edit_message_text.call_args.kwargs
        keyboard_on = call_kwargs_on["reply_markup"].inline_keyboard
        assert "üîÑ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ä–µ–∂–∏–º: ‚úÖ –í–∫–ª" in keyboard_on[1][0].text


@pytest.mark.asyncio
async def test_toggle_training_mode_handler():
    """–¢–µ—Å—Ç: –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –≤—ã–∑—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ë–î –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫—É –º–µ–Ω—é."""
    update = AsyncMock()
    update.callback_query.from_user.id = 123
    update.callback_query.data = CB_TOGGLE_TRAINING_MODE
    context = MagicMock()

    with patch("handlers.settings.UnitOfWork") as mock_uow_class:
        mock_uow = mock_uow_class.return_value.__enter__.return_value

        # –ú–æ–∫–∞–µ–º `settings_menu` –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –æ–Ω–∞ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        with patch(
            "handlers.settings.settings_menu", new_callable=AsyncMock
        ) as mock_settings_menu:
            await toggle_training_mode_handler(update, context)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤ –ë–î
            mock_uow.user_settings.toggle_training_mode.assert_called_once_with(123)
            mock_uow.commit.assert_called_once()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ–Ω—é –±—ã–ª–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞–Ω–æ
            mock_settings_menu.assert_called_once()


@pytest.mark.asyncio
async def test_manage_tenses_menu_initialization():
    """–¢–µ—Å—Ç: –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫, –æ–Ω–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è."""
    update = AsyncMock()
    update.callback_query.from_user.id = 123
    context = MagicMock()

    empty_settings_model = UserSettings(user_id=123)

    # –ú–æ–¥–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    default_settings_model = UserSettings(
        user_id=123,
        tense_settings=[
            UserTenseSetting(user_id=123, tense=Tense.PAST, is_active=True),
            UserTenseSetting(user_id=123, tense=Tense.PRESENT, is_active=True),
            UserTenseSetting(user_id=123, tense=Tense.FUTURE, is_active=True),
            UserTenseSetting(user_id=123, tense=Tense.IMPERATIVE, is_active=False),
        ],
    )

    with patch("handlers.settings.UnitOfWork") as mock_uow_class:
        mock_uow = mock_uow_class.return_value.__enter__.return_value
        # –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç, –ø–æ—Ç–æ–º –æ–Ω–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        mock_uow.user_settings.get_user_settings.side_effect = [
            empty_settings_model,
            default_settings_model,
        ]

        await manage_tenses_menu(update, context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        mock_uow.user_settings.initialize_tense_settings.assert_called_once_with(123)
        mock_uow.commit.assert_called_once()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ–Ω—é –±—ã–ª–æ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω–æ
        update.callback_query.edit_message_text.assert_called_once()
        call_kwargs = update.callback_query.edit_message_text.call_args.kwargs
        keyboard = call_kwargs["reply_markup"].inline_keyboard
        assert "‚úÖ –ü—Ä–æ—à–µ–¥—à–µ–µ" in keyboard[0][0].text
        assert "‚¨úÔ∏è –ü–æ–≤–µ–ª–∏—Ç–µ–ª—å–Ω–æ–µ" in keyboard[3][0].text


@pytest.mark.asyncio
async def test_toggle_tense():
    """–¢–µ—Å—Ç: –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–∑—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ë–î –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫—É –º–µ–Ω—é."""
    update = AsyncMock()
    update.callback_query.from_user.id = 123
    update.callback_query.data = f"{CB_TENSE_TOGGLE}:imp"  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ø–æ–≤–µ–ª–∏—Ç–µ–ª—å–Ω–æ–µ
    context = MagicMock()

    with patch("handlers.settings.UnitOfWork") as mock_uow_class:
        mock_uow = mock_uow_class.return_value.__enter__.return_value

        # –ú–æ–∫–∞–µ–º `manage_tenses_menu` –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –æ–Ω–∞ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        with patch(
            "handlers.settings.manage_tenses_menu", new_callable=AsyncMock
        ) as mock_manage_menu:
            await toggle_tense(update, context)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤ –ë–î
            mock_uow.user_settings.toggle_tense_setting.assert_called_once_with(
                123, "imp"
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ–Ω—é –±—ã–ª–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞–Ω–æ
            mock_manage_menu.assert_called_once()
