# tests/integration/test_search_add_integration.py
import pytest
from unittest.mock import AsyncMock, Mock, patch, PropertyMock

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from handlers.search import handle_text_message, add_word_to_dictionary
from config import CB_ADD, CB_DICT_CONFIRM_DELETE
from dal.unit_of_work import UnitOfWork
from dal.repositories import UserDictionaryRepository

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ conftest –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
TEST_USER_ID = 123456789
TEST_CHAT_ID = 987654321

# –ú–æ–∫ HTML-–æ—Ç–≤–µ—Ç–∞ –æ—Ç pealim.com –¥–ª—è —Å–ª–æ–≤–∞ "◊ë◊ì◊ô◊ß◊î"
# –û–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
MOCK_PEALIM_HTML = """
<html>
<head><title>◊ë◊ì◊ô◊ß◊î ‚Äì pealim.com</title></head>
<body>
    <h2 class="page-header">◊ë◊ì◊ô◊ß◊î</h2>
    <div class="transcription">bdika</div>
    <div class="lead">–ø—Ä–æ–≤–µ—Ä–∫–∞, —Ç–µ—Å—Ç; –∞–Ω–∞–ª–∏–∑</div>
</body>
</html>
"""


@pytest.mark.asyncio
@patch("services.parser.httpx.AsyncClient")  # –ü–∞—Ç—á–∏–º HTTP-–∫–ª–∏–µ–Ω—Ç –≤ –º–æ–¥—É–ª–µ –ø–∞—Ä—Å–µ—Ä–∞
async def test_full_search_and_add_scenario(mock_async_client, mock_context):
    """
    –ü–æ–ª–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è:
    1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ –∫—ç—à–µ.
    2. –°–ª–æ–≤–æ –ø–∞—Ä—Å–∏—Ç—Å—è —Å –≤–Ω–µ—à–Ω–µ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ (–∏—Å–ø–æ–ª—å–∑—É—è –º–æ–∫ HTTP) –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –ë–î.
    3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–î–æ–±–∞–≤–∏—Ç—å".
    4. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç "–î–æ–±–∞–≤–∏—Ç—å".
    5. –°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –µ–≥–æ –ª–∏—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ –ë–î.
    6. –ö–∞—Ä—Ç–æ—á–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞—è –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å".
    """
    # --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–æ–∫–æ–≤ ---
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ HTTP-–∫–ª–∏–µ–Ω—Ç–∞, —á—Ç–æ–±—ã –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–ª –Ω–∞—à —Ç–µ—Å—Ç–æ–≤—ã–π HTML
    mock_response = Mock()
    mock_response.text = MOCK_PEALIM_HTML
    mock_response.status_code = 200
    # –ü–∞—Ä—Å–µ—Ä —Å–ª–µ–¥—É–µ—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞–º, –ø–æ—ç—Ç–æ–º—É –º–æ–∫–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π URL
    type(mock_response).url = PropertyMock(
        return_value="https://www.pealim.com/ru/dict/1234-bdika/"
    )
    mock_async_client.return_value.__aenter__.return_value.get.return_value = (
        mock_response
    )

    # ============================================
    # --- –ß–∞—Å—Ç—å 1: –ü–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ ---
    # ============================================

    # 1.1. –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    search_update = Mock()
    user_message_text = "◊ë◊ì◊ô◊ß◊î"
    search_update.message = AsyncMock()
    search_update.message.text = user_message_text
    # –ú–æ–∫–∞–µ–º –æ—Ç–≤–µ—Ç "–ò—â—É —Å–ª–æ–≤–æ..."
    search_update.message.reply_text.return_value = AsyncMock(message_id=111)
    type(search_update).effective_user = PropertyMock(
        return_value=Mock(id=TEST_USER_ID)
    )
    type(search_update).effective_chat = PropertyMock(
        return_value=Mock(id=TEST_CHAT_ID)
    )

    # 1.2. –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    with patch("handlers.search.display_word_card") as mock_display_word_card:
        await handle_text_message(search_update, mock_context)

        # 1.3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ "–ò—â—É..." –±—ã–ª–æ —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        search_update.message.reply_text.assert_called_once_with(
            "üîé –ò—â—É —Å–ª–æ–≤–æ –≤–æ –≤–Ω–µ—à–Ω–µ–º —Å–ª–æ–≤–∞—Ä–µ..."
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ display_word_card –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞
        mock_display_word_card.assert_called_once()

        # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤—ã–∑–æ–≤–∞ display_word_card –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        _call_args, call_kwargs = mock_display_word_card.call_args
        print(call_kwargs)
        word_data = call_kwargs["word_data"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å"
        assert word_data["hebrew"] == "◊ë◊ì◊ô◊ß◊î"

    with UnitOfWork() as uow:
        word = uow.words.find_word_by_normalized_form("◊ë◊ì◊ô◊ß◊î")
        assert word is not None
        word_id = word.word_id
        assert uow.user_dictionary.is_word_in_dictionary(TEST_USER_ID, word_id) is False

    # =======================================================
    # --- –ß–∞—Å—Ç—å 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –≤ –ª–∏—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å ---
    # =======================================================

    # 2.1. –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å"
    add_update = Mock()
    mock_query = AsyncMock()
    # –í–∞–∂–Ω–æ –º–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ query, —Ç.–∫. —Ö–µ–Ω–¥–ª–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –µ–≥–æ chat_id –∏ message_id
    mock_query.message = AsyncMock(chat_id=TEST_CHAT_ID, message_id=111)
    type(add_update).callback_query = mock_query
    type(mock_query).data = PropertyMock(return_value=f"{CB_ADD}:{word_id}")
    type(mock_query).from_user = PropertyMock(return_value=Mock(id=TEST_USER_ID))

    # 2.2. –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞
    with patch("handlers.search.display_word_card") as mock_display_word_card:
        await add_word_to_dictionary(add_update, mock_context)

        # 2.3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        mock_display_word_card.assert_called_once()
        _call_args, call_kwargs = mock_display_word_card.call_args
        assert call_kwargs["in_dictionary"] is True

    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ë–î: —Å–ª–æ–≤–æ —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with UnitOfWork() as uow:
        assert uow.user_dictionary.is_word_in_dictionary(TEST_USER_ID, word_id) is True
