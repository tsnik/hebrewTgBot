import pytest
from unittest.mock import MagicMock, AsyncMock, patch
from datetime import datetime

# –≠—Ç–∏ –∏–º–ø–æ—Ä—Ç—ã –≤–µ—Ä–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –æ—Ç—Ä–∞–∂–∞—é—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
from dal.models import CachedWord, Translation
from handlers.common import start, main_menu
from handlers.dictionary import view_dictionary_page_handler, confirm_delete_word, execute_delete_word
from handlers.search import handle_text_message, add_word_to_dictionary, show_verb_conjugations, view_word_card_handler
from handlers.training import training_menu, start_flashcard_training, show_answer, handle_self_evaluation, start_verb_trainer


# --- –¢–µ—Å—Ç—ã –¥–ª—è –æ–±—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (–Ω–µ —Ç—Ä–µ–±—É—é—Ç –ø–∞—Ç—á–∏–Ω–≥–∞ –ë–î) ---

@pytest.mark.asyncio
async def test_start():
    update = AsyncMock()
    update.effective_user.first_name = "Test"
    update.effective_user.id = 123
    update.effective_user.username = "testuser"
    context = MagicMock()

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±—Ä–∞–Ω –ø—Ä–µ—Ñ–∏–∫—Å 'app.'
    with patch('handlers.common.UnitOfWork') as mock_uow_class:
        mock_uow_instance = mock_uow_class.return_value.__enter__.return_value

        await start(update, context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î
        mock_uow_instance.user_dictionary.add_user.assert_called_once_with(123, "Test", "testuser")
        mock_uow_instance.commit.assert_called_once()

    update.message.reply_text.assert_called_once()
    assert "–ü—Ä–∏–≤–µ—Ç, Test!" in update.message.reply_text.call_args.args[0]


@pytest.mark.asyncio
async def test_main_menu():
    update = AsyncMock()
    context = MagicMock()

    await main_menu(update, context)

    update.callback_query.answer.assert_called_once()
    update.callback_query.edit_message_text.assert_called_once()
    assert "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" in update.callback_query.edit_message_text.call_args.args[0]


# --- –¢–µ—Å—Ç—ã –¥–ª—è —Å–ª–æ–≤–∞—Ä—è (Dictionary Handlers) ---

@pytest.mark.asyncio
async def test_view_dictionary_page_handler_with_words():
    """–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–ª–æ–≤–∞—Ä—è, –∫–æ–≥–¥–∞ —Å–ª–æ–≤–∞ –µ—Å—Ç—å."""
    update = AsyncMock()
    update.callback_query.data = "dict:view:0"
    update.callback_query.from_user.id = 123
    context = MagicMock()

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±—Ä–∞–Ω –ø—Ä–µ—Ñ–∏–∫—Å 'app.'
    with patch('handlers.dictionary.UnitOfWork') as mock_uow_class:
        mock_uow_instance = mock_uow_class.return_value.__enter__.return_value
        mock_uow_instance.user_dictionary.get_dictionary_page.return_value = [
            {'word_id': 1, 'hebrew': '◊©◊ú◊ï◊ù', 'translation_text': '–ø—Ä–∏–≤–µ—Ç'},
            {'word_id': 2, 'hebrew': '◊õ◊ú◊ë', 'translation_text': '—Å–æ–±–∞–∫–∞'},
        ]

        await view_dictionary_page_handler(update, context)

    update.callback_query.edit_message_text.assert_called_once()
    call_text = update.callback_query.edit_message_text.call_args.args[0]
    assert "–í–∞—à —Å–ª–æ–≤–∞—Ä—å (—Å—Ç—Ä. 1):" in call_text
    assert "‚Ä¢ ◊©◊ú◊ï◊ù ‚Äî –ø—Ä–∏–≤–µ—Ç" in call_text
    assert "‚Ä¢ ◊õ◊ú◊ë ‚Äî —Å–æ–±–∞–∫–∞" in call_text


@pytest.mark.asyncio
async def test_view_dictionary_page_handler_empty():
    """–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è, –∫–æ–≥–¥–∞ –æ–Ω –ø—É—Å—Ç."""
    update = AsyncMock()
    update.callback_query.data = "dict:view:0"
    update.callback_query.from_user.id = 123
    context = MagicMock()

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±—Ä–∞–Ω –ø—Ä–µ—Ñ–∏–∫—Å 'app.'
    with patch('handlers.dictionary.UnitOfWork') as mock_uow_class:
        mock_uow_instance = mock_uow_class.return_value.__enter__.return_value
        mock_uow_instance.user_dictionary.get_dictionary_page.return_value = []

        await view_dictionary_page_handler(update, context)

    update.callback_query.edit_message_text.assert_called_once()
    assert "–í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç" in update.callback_query.edit_message_text.call_args.args[0]


@pytest.mark.asyncio
async def test_delete_word_flow():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞."""
    update = AsyncMock()
    context = MagicMock()
    user_id = 123
    word_id_to_delete = 1
    page = 0
    update.callback_query.from_user.id = user_id

    # --- –®–∞–≥ 1: –í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è ---
    update.callback_query.data = f"dict:delete_mode:{page}"
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±—Ä–∞–Ω –ø—Ä–µ—Ñ–∏–∫—Å 'app.'
    with patch('handlers.dictionary.UnitOfWork') as mock_uow_class:
        mock_uow_instance = mock_uow_class.return_value.__enter__.return_value
        mock_uow_instance.user_dictionary.get_dictionary_page.return_value = [
            {'word_id': word_id_to_delete, 'hebrew': '◊©◊ú◊ï◊ù', 'translation_text': 'hello'}
        ]
        await view_dictionary_page_handler(update, context)

    update.callback_query.edit_message_text.assert_called_once()
    assert "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è" in update.callback_query.edit_message_text.call_args.args[0]
    update.callback_query.reset_mock()

    # --- –®–∞–≥ 2: –í—ã–±–æ—Ä —Å–ª–æ–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–æ—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è) ---
    update.callback_query.data = f"dict:confirm_delete:{word_id_to_delete}:{page}"
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±—Ä–∞–Ω –ø—Ä–µ—Ñ–∏–∫—Å 'app.'
    with patch('handlers.dictionary.UnitOfWork') as mock_uow_class:
        mock_uow_instance = mock_uow_class.return_value.__enter__.return_value
        mock_uow_instance.words.get_word_hebrew_by_id.return_value = "◊©◊ú◊ï◊ù"
        await confirm_delete_word(update, context)

    update.callback_query.edit_message_text.assert_called_once()
    assert "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ '◊©◊ú◊ï◊ù'" in update.callback_query.edit_message_text.call_args.args[0]
    update.callback_query.reset_mock()

    # --- –®–∞–≥ 3: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ ---
    update.callback_query.data = f"dict:execute_delete:{word_id_to_delete}:{page}"
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±—Ä–∞–Ω –ø—Ä–µ—Ñ–∏–∫—Å 'app.'
    with patch('handlers.dictionary.UnitOfWork') as mock_uow_class:
        mock_uow_instance = mock_uow_class.return_value.__enter__.return_value
        mock_uow_instance.user_dictionary.get_dictionary_page.return_value = []
        await execute_delete_word(update, context)

    mock_uow_instance.user_dictionary.remove_word_from_dictionary.assert_called_once_with(user_id, word_id_to_delete)
    mock_uow_instance.commit.assert_called_once()

    update.callback_query.edit_message_text.assert_called_once()
    assert "–í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç" in update.callback_query.edit_message_text.call_args.args[0]


# --- –¢–µ—Å—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ (Search Handlers) ---

@pytest.mark.asyncio
async def test_add_word_to_dictionary():
    update = AsyncMock()
    update.callback_query.data = "word:add:1"
    user_id = 123
    word_id = 1
    update.callback_query.from_user.id = user_id
    context = MagicMock()

    mock_word_data = CachedWord(
        word_id=word_id, hebrew='◊©◊ú◊ï◊ù', normalized_hebrew='◊©◊ú◊ï◊ù', is_verb=False,
        fetched_at=datetime.now(),
        translations=[
            Translation(
                translation_id=101, word_id=word_id, translation_text='hello',
                is_primary=True, context_comment=None
            )
        ],
        conjugations=[]
    )

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±—Ä–∞–Ω –ø—Ä–µ—Ñ–∏–∫—Å 'app.'
    with patch('handlers.search.UnitOfWork') as mock_uow_class:
        mock_uow_instance = mock_uow_class.return_value.__enter__.return_value
        mock_uow_instance.words.get_word_by_id.return_value = mock_word_data

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±—Ä–∞–Ω –ø—Ä–µ—Ñ–∏–∫—Å 'app.'
        with patch('handlers.search.display_word_card') as mock_display:
            await add_word_to_dictionary(update, context)

    mock_uow_instance.user_dictionary.add_word_to_dictionary.assert_called_once_with(user_id, word_id)
    mock_uow_instance.commit.assert_called_once()
    mock_display.assert_called_once()


@pytest.mark.asyncio
async def test_handle_text_message_word_not_in_db_found_externally():
    update = AsyncMock()
    update.message.text = "◊ó◊ì◊©"
    update.effective_user.id = 123
    context = MagicMock()
    context.bot.edit_message_text = AsyncMock()

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±—Ä–∞–Ω –ø—Ä–µ—Ñ–∏–∫—Å 'app.'
    with patch('handlers.search.UnitOfWork') as mock_uow_class:
        mock_uow_instance = mock_uow_class.return_value.__enter__.return_value
        mock_uow_instance.words.find_word_by_normalized_form.return_value = None

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±—Ä–∞–Ω –ø—Ä–µ—Ñ–∏–∫—Å 'app.'
        with patch('handlers.search.fetch_and_cache_word_data') as mock_fetch:
            mock_fetch.return_value = ('ok', {'word_id': 99, 'hebrew': '◊ó◊ì◊©', 'translations': []})

            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±—Ä–∞–Ω –ø—Ä–µ—Ñ–∏–∫—Å 'app.'
            with patch('handlers.search.display_word_card') as mock_display:
                await handle_text_message(update, context)

    update.message.reply_text.assert_called_once_with("üîé –ò—â—É —Å–ª–æ–≤–æ –≤–æ –≤–Ω–µ—à–Ω–µ–º —Å–ª–æ–≤–∞—Ä–µ...")
    mock_fetch.assert_called_once()
    mock_display.assert_called_once()


# --- –¢–µ—Å—Ç—ã –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (Training Handlers) ---

@pytest.mark.asyncio
async def test_start_flashcard_training_no_words():
    update = AsyncMock()
    update.callback_query = AsyncMock()
    update.callback_query.data = "train:he_ru"
    update.callback_query.from_user.id = 123
    context = MagicMock()

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±—Ä–∞–Ω –ø—Ä–µ—Ñ–∏–∫—Å 'app.'
    with patch('handlers.training.UnitOfWork') as mock_uow_class:
        mock_uow_instance = mock_uow_class.return_value.__enter__.return_value
        mock_uow_instance.user_dictionary.get_user_words_for_training.return_value = []

        await start_flashcard_training(update, context)

    update.callback_query.edit_message_text.assert_called_once()
    assert "–í —Å–ª–æ–≤–∞—Ä–µ –Ω–µ—Ç —Å–ª–æ–≤" in update.callback_query.edit_message_text.call_args.args[0]


@pytest.mark.asyncio
async def test_start_verb_trainer_no_verbs():
    update = AsyncMock()
    update.callback_query = AsyncMock()
    user_id = 123
    update.callback_query.from_user.id = user_id
    context = MagicMock()

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±—Ä–∞–Ω –ø—Ä–µ—Ñ–∏–∫—Å 'app.'
    with patch('handlers.training.UnitOfWork') as mock_uow_class:
        mock_uow_instance = mock_uow_class.return_value.__enter__.return_value
        mock_uow_instance.words.get_random_verb_for_training.return_value = None

        await start_verb_trainer(update, context)

    mock_uow_instance.words.get_random_verb_for_training.assert_called_with(user_id)
    update.callback_query.edit_message_text.assert_called_once()
    assert "–í –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ –Ω–µ—Ç –≥–ª–∞–≥–æ–ª–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏" in update.callback_query.edit_message_text.call_args.args[0]